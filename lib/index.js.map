{"mappings":"4fAAaA,EAAM,+DCAO,cACP,oBAANC,OAAsB,KAEvBC,EAAUC,EAAVD,MAGRE,EAAOC,UAAQ,IAAOH,GAAQD,OAAOI,UCLzCC,YAiBgBC,EACdC,EACAC,OAAAC,OAAsB,IAAtBD,GAAAA,EAEME,EAAQC,EAAWJ,GACnBK,EAAS,IAAOC,EAAgBH,EAAMI,SACtCC,EAAgBC,EAAQC,EAAKlB,GAASa,GACtCM,EAAW,IAEXC,EAAMf,SAASgB,gBAhBZ,6BAgBiC,OAE1CD,EAAIE,aAAY,IAAI,KACpBF,EAAIE,aAAY,IAAI,KACpBF,EAAIE,aAAY,UAAU,OAAqBC,OAAZJ,EAAQ,KAAaI,OAATJ,QAEzCK,EAASnB,SAASoB,cAAa,UACrCD,EAAOF,aAAY,IAAI,IAAiBI,YACxCF,EAAOF,aAAY,KAAK,IAAiBI,YACzCF,EAAOF,aAAY,KAAK,IAAiBI,YACzCF,EAAOF,aAAY,OAASK,EAASX,EAAeH,IACpDO,EAAIQ,YAAYJ,GAEhBR,EAAca,KAAI,mBAITC,EAAI,EAAGA,EAFG,EAEaA,IAAC,KACzBC,EAAQC,EACZnB,EACAG,EACAG,EACAW,EAPe,GAWjBV,EAAIQ,YAAYG,UAGXrB,EAAkBU,EAAIa,UAAoBb,MAG7CY,EAAa,SACjBnB,EACAqB,EACAf,EACAW,EACAK,WAEMC,EAASjB,EAAW,EAGpBkB,EAAQlB,EAAWgB,GAAUA,EAAQL,GAF/BX,EAAW,EAInBmB,EAAWzB,EAAU0B,SAASb,WAE9Bc,EAAQC,SAAS5B,EAAU0B,SAASb,WAAWgB,OAAM,IAElDF,GAAS,GACdA,EAAQC,SAASH,EAASI,OAAM,IAChCJ,EAAWA,EAASI,MAAM,GAAG,OAGvBC,EAASC,EAAS,CACxBP,KAAAA,EACAQ,KAAMhC,EAAU0B,SAASb,WACzBc,MAAAA,IAHMG,KAMFZ,EAAQ1B,SAASoB,cAAa,eAEpCM,EAAMT,aAAY,YACL,aAGNC,OADHa,EAASC,EAAO,EAAIxB,EAAU0B,UAAiC,GAArB1B,EAAU0B,UAAa,MACKhB,OAAnEa,EAASC,EAAO,EAAIxB,EAAU0B,UAAiC,GAArB1B,EAAU0B,UAAa,MAGxER,EAAMT,aAAY,IAAMqB,GACxBZ,EAAMT,aAAY,OAASK,EAASO,EAAQrB,IAErCkB,GAGHJ,EAAQ,SAAIO,EAAkBrB,OAC5BiC,EAAMC,KAAKC,MAAMd,EAAOe,OAASpC,EAAU0B,iBAC1CL,EAAOgB,OAAOJ,EAAK,GAAG,IAGzB7B,EAAQ,SAAIiB,EAAkBrB,OAC5BsC,EAA8B,GAArBtC,EAAU0B,SAAgB,UAElCL,EAAOkB,KAAG,SAAEC,mBAGAA,EAAaC,OAC1BC,EAAMC,EAAOH,GAAKI,QACpBC,EAAMH,EAAII,SAGdD,GADAA,GAAOA,EAAMJ,GAAW,KACZ,EAAI,IAAMI,EAAMA,EAC5BH,EAAII,EAAID,EAEDF,EAAOD,GAAKK,QAXgBC,CAAYR,EAAKF","sources":["src/colors.ts","src/polyfill.ts","src/index.ts"],"sourcesContent":["export const colors = [\n  \"#e90d03\",\n  \"#2f3258\",\n  \"#2f3258\",\n  \"#ff5004\",\n  \"#673ab7\",\n  \"#9c27b0\",\n];\n","export const applyPolyfill = () => {\n  if (typeof window === \"undefined\") {\n    // @ts-ignore\n    const { JSDOM } = require(\"jsdom\");\n\n    // @ts-ignore\n    global.document = new JSDOM().window.document;\n  }\n};\n","import { applyPolyfill } from \"./polyfill\";\napplyPolyfill();\n\nimport MersenneTwister from \"mersenne-twister\";\nimport seedrandom from \"seedrandom\";\nimport { colord } from \"colord\";\nimport { colors } from \"./colors\";\nimport { generatePaper } from \"./generatePaper\";\n// @ts-ignore\nimport blobshape from \"blobshape\";\n\nconst SVGNS = \"http://www.w3.org/2000/svg\";\n\nexport function generateIdentIcon(\n  hash: string,\n  outputAsString?: false\n): SVGSVGElement;\nexport function generateIdentIcon(hash: string, outputAsString: true): string;\nexport function generateIdentIcon(\n  hash: string,\n  outputAsString = false\n): string | SVGSVGElement {\n  const range = seedrandom(hash);\n  const generator = new MersenneTwister(range.int32());\n  const shiftedColors = hueShift([...colors], generator);\n  const diameter = 100;\n\n  const svg = document.createElementNS(SVGNS, \"svg\");\n\n  svg.setAttribute(\"x\", \"0\");\n  svg.setAttribute(\"y\", \"0\");\n  svg.setAttribute(\"viewBox\", `0 0 ${diameter} ${diameter}`);\n\n  const circle = document.createElement(\"circle\");\n  circle.setAttribute(\"r\", (diameter / 2).toString());\n  circle.setAttribute(\"cx\", (diameter / 2).toString());\n  circle.setAttribute(\"cy\", (diameter / 2).toString());\n  circle.setAttribute(\"fill\", getColor(shiftedColors, generator));\n  svg.appendChild(circle);\n\n  shiftedColors.push(\"#ffffff\");\n\n  const shapeCount = 3;\n\n  for (let i = 0; i < shapeCount; i++) {\n    const shape = generateShape(\n      generator,\n      shiftedColors,\n      diameter,\n      i,\n      shapeCount\n    );\n\n    svg.appendChild(shape);\n  }\n\n  return outputAsString ? (svg.outerHTML as any) : svg;\n}\n\nconst generateShape = (\n  generator: MersenneTwister,\n  colors: string[],\n  diameter: number,\n  i: number,\n  total: number\n) => {\n  const center = diameter / 2;\n  const gap = diameter / 8;\n\n  const size = (diameter / total) * (total - i) + gap;\n\n  let stringId = generator.random().toString();\n\n  let edges = parseInt(generator.random().toString().slice(-1));\n\n  while (edges <= 3) {\n    edges = parseInt(stringId.slice(-1));\n    stringId = stringId.slice(0, -1);\n  }\n\n  const { path } = blobshape({\n    size,\n    seed: generator.random().toString(),\n    edges,\n  });\n\n  const shape = document.createElement(\"path\");\n\n  shape.setAttribute(\n    \"transform\",\n    `translate(${\n      center - size / 2 + generator.random() * (generator.random() * 10)\n    }, ${center - size / 2 + generator.random() * (generator.random() * 10)})`\n  );\n\n  shape.setAttribute(\"d\", path);\n  shape.setAttribute(\"fill\", getColor(colors, generator));\n\n  return shape;\n};\n\nconst getColor = (colors: string[], generator: MersenneTwister) => {\n  const idx = Math.floor(colors.length * generator.random());\n  return colors.splice(idx, 1)[0];\n};\n\nconst hueShift = (colors: string[], generator: MersenneTwister) => {\n  const amount = generator.random() * 30 - 30 / 2;\n\n  return colors.map((hex: string) => colorRotate(hex, amount));\n};\n\nfunction colorRotate(hex: string, degrees: number) {\n  const hsl = colord(hex).toHsl();\n  let hue = hsl.h;\n\n  hue = (hue + degrees) % 360;\n  hue = hue < 0 ? 360 + hue : hue;\n  hsl.h = hue;\n\n  return colord(hsl).toHex();\n}\n"],"names":["$e2d39e43ce9930b40cc4127769192e0c$export$8cebf0b5f323ec11","window","JSDOM","$2DIbH$jsdom","$parcel$global","document","$fe343e49912819743ee9f0743632ae8e$export$10f308012c0309dd","$90f94668a859191c7544bdbc033902d9$export$335892849d4c44df","hash","param","outputAsString","range","$2DIbH$seedrandom","generator","$2DIbH$mersennetwister","int32","shiftedColors","$90f94668a859191c7544bdbc033902d9$var$hueShift","$2DIbH$toConsumableArray","diameter","svg","createElementNS","setAttribute","concat","circle","createElement","toString","$90f94668a859191c7544bdbc033902d9$var$getColor","appendChild","push","i","shape","$90f94668a859191c7544bdbc033902d9$var$generateShape","outerHTML","colors","total","center","size","stringId","random","edges","parseInt","slice","path","$2DIbH$blobshape","seed","idx","Math","floor","length","splice","amount","map","hex","degrees","hsl","$2DIbH$colord","toHsl","hue","h","toHex","$90f94668a859191c7544bdbc033902d9$var$colorRotate"],"version":3,"file":"index.js.map"}